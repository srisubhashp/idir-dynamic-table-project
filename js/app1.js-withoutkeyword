/*
List of all Global Variables and use
- domain: holds all the domains retrueved from the GET request. 
- radius: Defines the radius of the circle for nodes.
- types: unused here
- patialGraph: the variable holds the partialgraph that gets sent to the backend with the POST request
- rejectedGraph: the variable holds the rejected graph and gets updated everytime a node or an edge gets deleted. Also gets updated by unselected suggestions
- disconnectedGraph: The variable is true: if the graph is disconnected and false: if the the graph is connected.
- suggestionCounter: 
- suggestionPicked: Suggestion picked is set to true when the user has selected a suggestion from the suggested noodes(grey nodes).
- nextButtonClick: this variable is set to true everytime the user asks for the next set of suggestions by clicking the 'refresh suggestions' button. 
- defaultNodeColor: represents the color of an unselected node. 
- selectedNodeColer: represents the color the node is set to if selected.
- nodeclick: the variable captures a node click. Id set to true if a node is clicked. 
- selectedlinkColo: not implemented
- allowNodeCreation: the variable is set to true in a case when we want to allow node creation. It is set to false if the user clicks a link or a node, or of the shift key is held down
- newNode: The variable is set to true everytime a new variable gets created. 
- value: unused
- drawedge: set to true when the user is allowed to draw an edge. Set to false when the shift key is held down
- min_zoom, max_zoom: used to set limit to the zoom when feature was included. currently unused. 
- suggestions: set to true when suggested nodes(grey nodes) are still being displayed to the user. 
*/

var domain = [], radius = 15;
var types = [];
var partialGraph = [];
var rejectedGraph = [];
var linkTypes = [];
var returnObject = [];
var disconnectedGraph = false;
var noOfSuggestions = 3;
var suggestionCounter = 0;
var suggestionsFinalized = false;
var suggestionPicked = false;
var nextButtonClick = false;
var defaultNodeColor = "white", selectedNodeColor = "#FFCC99", nodeclick = false, selectedlinkColor = "red", allowNodeCreation = true, newNode = false, newEdge = false;
// set up SVG for D3
// var defaultNodeColor = "#FF8000", selectedNodeColor = "#FFCC99", nodeclick = false, selectedlinkColor = "red", allowNodeCreation = true, newNode = false, newEdge = false;
// var types = ["Select name","type1", "type2", "type3", "type4", "type5", "type6", "type7"];
// var domain = ["Select Name", "Domain1", "Domain2", "domain3", "Domain4", "Domain5", "Domain6"];
// var linkTypes = ["Select name", "name1", "name2", "name3", "name4", "name5",  "name6" , "name7"];
var value = [], selected_edge=null;
// var width  = $("#app-body").width(),
//     height = $("#app-body").height(),
var width  = $("#app-body").width(),
    height = 600,
    colors = d3.scale.category10();
var drawEdge = true;
var min_zoom = 0.1;
var max_zoom = 7;
var zoom = d3.behavior.zoom().scaleExtent([min_zoom,max_zoom]);
var suggestions = false;

var temp = $("#lower-div-1").height();
$("#lower-div-2").height(temp-296);


//This function adds the animation to the active help.
$('#active-help').each(function() {
    $(this).children().each(function(i) {
        $(this).delay((i++) * 2000).animate({left:0, opacity:1});
    });
});

//Set the height of the svg graph.
// $("#app-body").attr("height",(screen.height*.6));
$("#svg-div").attr("height", "400");

$(document).ready(function(){
  jQuery("#selectDiv").hide();
  //Initial GET request to get all Domain suggestions.
  getRequest("http://idir-server1:8080/greeting", "", domain)
});

/*
Function for the 'x' button of the options pane. It deletes the node or the edge, if the 'x' is clicked instead of the 'save' button. 
*/
$("#x-button").click(function(){
  if (selected_node) {
    nodes.splice(nodes.indexOf(selected_node), 1);
    $("#show-instructions").attr("disabled", false);
    restart();
  }else if (selected_link) {
    selected_link.source = selected_link.target;
    selected_link = null;
  };
  restart();
});







/*
THe method gets invoked whenever the 'Help' button is clicked on the suggestions pane. 
It displays suggestions based on the context. 
*/
$("#show-instructions").click(function(){
  if (newNode && newEdge==false) {
    nodeNameText(selected_node, 1);  
  }else if(newNode==false && newEdge==false){
    nodeNameText(selected_node, 2);  
  }else{
    nodeNameText(selected_node, 3);
  }
  
});

//Adds the svg to the graph.
var svg = d3.select('#svg-div')
  .append('svg')
  .attr('width', $('#svg-div').width())
  .attr('height', "800")
  .attr('id','queryConstructSVG');
  // .call(zoom);

//Sets the x location of the 'refresh suggestions' button.
var x = $('#svg-div').width()-225;

//Creates the 'refresh suggestions' button.
var buttonG = svg.append('g')
                  .attr("transform", "translate("+x+",0)")
                  // .attr("x", 1000)
                  // .attr("y", 17)
                  .attr("width", 250)
                  .attr("height", 60)
                  // .attr('fill', "blue")
                  .attr("id", "button-g")
                  .on('mouseover', function(){
                     this.style.cursor='pointer';
                     nextButtonClick = true;
                  })
                  .on('mouseout', function(){
                    nextButtonClick = false;
                  })

                  buttonG.on("click", function(){
                    nextButtonClick = true;
                    console.log("g clicked");
                  });
                  // .on('click', function(){
                  //   nextButtonClick = true;
                  //   removeTempNodes();
                  //   nextButtonClick = false;
                  //   addSuggestions();
                  // });

var buttonRect = buttonG.append("rect")
                    .attr("rx", 6)
                    .attr("ry", 6)
                    .attr("x", 25)
                    .attr("y", 10)
                    .attr("width", 200)
                    .attr("height", 38)
                    .attr('fill', "#428bca")
                    .on('click', function(){
                      nextButtonClick = true;
                    });

var refresh = buttonG.append('text')
                 .text('Refresh Suggestions').attr("y", 35).attr("x",31)
                  .attr("font-family", "sans-serif")
                  .attr("font-size", "20px")
                  .attr("fill", "white")
                  .on('click', function(){
                    nextButtonClick = true;
                  });

$("#button-g").hide();

var g = svg.append('svg:g').attr('id','queryConstructG');
var nodes = [],
  lastNodeId = 2,
  links = [],
  lastEdgeID=2;
for (var i = 0; i < links.length; i++) {
    value[i] = links[i].value;
  };
var currentEdges = links.length;
// init D3 force layout
var force = d3.layout.force()
    .nodes(nodes)
    .links(links)
    .size([width, height])
    .linkDistance(200)
    .charge(-1000)
    .on('tick', tick);

var justDragged=false;
//Setting up drag behavior on nodes. Calls respective functions on dragstart, drag and dragend.
var drag = d3.behavior.drag()
    .on("dragstart", dragstart)
    .on("drag", dragmove)
    .on("dragend", dragend);

var defs = g.append("svg:defs").selectAll("marker");
defs.attr("id", "defs-marker");

// line displayed when dragging new nodes
var drag_line = g.append('svg:path')
  .attr('class', 'link dragline hidden')
  .attr('d', 'M0,0L0,0');

// handles to link and node element groups
var path = g.append('svg:g').attr("id","pathG").selectAll('path'),
    circle = g.append('svg:g').attr('id','circleG').selectAll('g');

var linkText = g.append('svg:g').attr('id',"linktextg")
                .selectAll('g.linkLabelHolder');


// mouse event vars
var selected_node = null,
    selected_link = null,
    mousedown_link = null,
    mousedown_node = null,
    mouseup_node = null, allowNodeDrag = false, link_click=false;

function resetMouseVars() {
  mousedown_node = null;
  mouseup_node = null;
  mousedown_link = null;
}
var translateAllowed = false;
// update force layout (called automatically each iteration)
function tick() {
  var width = jQuery("#queryConstructSVG").width();
  var height = jQuery("#queryConstructSVG").height();
  circle.attr("cx", function(d) { return d.x = Math.max(radius, Math.min(width - radius, d.x)); })
       .attr("cy", function(d) { return d.y = Math.max(radius, Math.min(height - radius, d.y)); });
  // draw directed edges with proper padding from node centers
  path.attr('d', function(d) {
    var deltaX = d.target.x - d.source.x,
        deltaY = d.target.y - d.source.y,
        dist = Math.sqrt(deltaX * deltaX + deltaY * deltaY),
        normX = deltaX / dist,
        normY = deltaY / dist,
        sourcePadding = 12,
        targetPadding = 12,
        sourceX = d.source.x + (sourcePadding * normX),
        sourceY = d.source.y + (sourcePadding * normY),
        targetX = d.target.x - (targetPadding * normX),
        targetY = d.target.y - (targetPadding * normY);
    return 'M' + sourceX + ',' + sourceY + 'L' + targetX + ',' + targetY;
  });

  circle.attr('transform', function(d) {
    return 'translate(' + d.x + ',' + d.y + ')';
  });
  // circle.attr("fill", "None");

}

// update graph (called when needed)
function restart() {
  // console.log("inside restart function");
  // path (link) group
 
if(suggestionsFinalized == true)
{
   for(var i = 0; i < nodes.length; i++)
   {
  if (nodes[i].greyflag == 2){  nodes[i].greyflag = 0};
  } suggestionsFinalized = false;
}


for (var i = 0; i < links.length; i++) {
  var ID = "#edge"+(links[i].id);
  $(ID).remove();
};
for (var i = 0; i < links.length; i++) {
 var id = "#linkLabelHolderId_"+(links[i].id);
 $(id).remove();
};

value.length = 0;
for (var i = 0; i < links.length; i++) {
  value[i] = links[i].value;
};

$('#defs-marker').empty();
defs.data(value)
    .enter();

  path = path.data(links);

  path.enter().append("svg:path")
      .attr("class", function(d) {
         return ("link " + d.value); })
      .attr("id",function(d,i) { 
          return "linkId_" + d.id; })
      .attr("marker-end", function(d) { return "url(#" + d.value + ")"; })
      .style('stroke', function(d){
          return 'black';
        })
      .on('mousedown', function(d) {
          if (selected_link == null || selected_link != d) {
            if (selected_link)
              $("#linkId_"+selected_link.id).css('stroke', 'black');
            selected_link = d;
            $("#linkId_"+d.id).css('stroke', 'orange');
            // d.style("fill", "green");
          }else if(selected_link == d){
            $("#linkId_"+selected_link.id).css('stroke', 'black');
            selected_link = null
          }

          allowNodeCreation = false;

          $("#edge-options").empty();
          for (var i = 0; i < linkTypes.length; i++) {
            $("#edge-options").append('<option value="'+linkTypes[i]+'" id="add-value-1" onClick=changeName('+linkTypes[i]+')>'+linkTypes[i]+'</option>');
          };

          if(d3.event.ctrlKey) return;

          // select link
          mousedown_link = d;
          // if(mousedown_link === selected_link) selected_link = null;
          // else selected_link = mousedown_link;
          selected_node = null;
          console.log("link selected");
          // selectEgde();
          $("#type-div").hide();
          $("#entity-div").hide();
          $("#domain-div").hide();
          $("#edge-div").show();
          link_click=true;
          restart();
        })
      .on('mouseup', function(d){
          if (selected_link) {
            $("#linkId_"+d.id).css('stroke', 'orange');
          }else{
            $("#linkId_"+d.id).css('stroke', 'black');
          }
          allowNodeCreation = true;

          if (selected_link) {
            for (var i = 0, j=0; i < links.length; i++) {
              if (links[i].linkID != -1 && (links[i].source != links[i].target)) {
                partialGraph[j] = {source: links[i].source.nodeID, edge: links[i].linkID, object: links[i].target.nodeID};
                j++;
              }
            };

            var data = {
              partialGraph: partialGraph,
              mode: 0,
              rejectedGraph: rejectedGraph,
              activeEdgeEnds: {source: selected_link.source.nodeID, object: selected_link.target.nodeID},
              dataGraphInUse: 0
            };
            // postRequest(data, linkTypes, returnObject);
            postRequest(data);
            $("#edge-options").empty();
            for (var i = 0; i < linkTypes.length; i++) {
              $("#edge-options").append('<option value="'+linkTypes[i][0]+'" id="add-value-1" >'+linkTypes[i][1]+'</option>');
            };
          };

          restart();
        });



  // remove old links
  // path.exit().remove();

   

  linkText.data(force.links())
          .enter().append("g").attr("class", "linklabelholder")
          .attr("id", function(d,i) { return "linkLabelHolderId_" + d.id;})
         .append("text")
         .attr("class", "linklabel")
         .style("font-size", "25px")
         .attr('x', "60")
         .attr("y", "10")
         .attr("text-anchor", "start")
         .style("fill","#000")
         .append("textPath").attr('id', function(d,i) { return "textPath" + d.id;})
         // .attr("id", function(d,i) { return "#linkId_" + d.id;})
         .attr("xlink:href",function(d,i) { 
          return "#linkId_" + d.id;
        })
         .text(function(d) { 
            return d.value; 
         }).on('mousedown', function(d) {
          if (selected_link == null || selected_link != d) {
            if (selected_link)
              $("#linkId_"+selected_link.id).css('stroke', 'black');
            selected_link = d;
            $("#linkId_"+d.id).css('stroke', 'orange');
            // d.style("fill", "green");
          }else if(selected_link == d){
            $("#linkId_"+selected_link.id).css('stroke', 'black');
            selected_link = null
          }

          allowNodeCreation = false;

          $("#edge-options").empty();
          for (var i = 0; i < linkTypes.length; i++) {
            $("#edge-options").append('<option value="'+linkTypes[i]+'" id="add-value-1" onClick=changeName('+linkTypes[i]+')>'+linkTypes[i]+'</option>');
          };

          if(d3.event.ctrlKey) return;

          // select link
          mousedown_link = d;
          // if(mousedown_link === selected_link) selected_link = null;
          // else selected_link = mousedown_link;
          selected_node = null;
          console.log("link selected");
          // selectEgde();
          // $("#type-div").hide();
          // $("#entity-div").hide();
          // $("#domain-div").hide();
          // $("#edge-div").show();
          link_click=true;
          restart();
        })
      .on('mouseup', function(d){
          if (selected_link) {
            $("#linkId_"+d.id).css('stroke', 'orange');
          }else{
            $("#linkId_"+d.id).css('stroke', 'black');
          }
          allowNodeCreation = true;

          if (selected_link) {
            // for (var i = 0, j=0; i < links.length; i++) {
            //   if (links[i].linkID != -1 && (links[i].source != links[i].target)) {
            //     partialGraph[j] = {source: links[i].source.nodeID, edge: links[i].linkID, object: links[i].target.nodeID};
            //     j++;
            //   }
            // };

            // var data = {
            //   partialGraph: partialGraph,
            //   mode: 0,
            //   rejectedGraph: rejectedGraph,
            //   activeEdgeEnds: {source: selected_link.source.nodeID, object: selected_link.target.nodeID},
            //   dataGraphInUse: 0
            // };
            // postRequest(data);
            selected_node = null;
            // $("#myModal").modal('show');
            // $("#type-div").hide();
            // $("#entity-div").hide();
            // $("#domain-div").hide();
            // $("#edge-options").empty();
            // for (var i = 0; i < linkTypes.length; i++) {
            //   $("#edge-options").append('<option value="'+linkTypes[i][0]+'" id="add-value-1" >'+linkTypes[i][1]+'</option>');
            // };
            // $("#edge-div").show();
          };

              restart();
        }).on('mouseover', function(){
           this.style.cursor='pointer';
        });


  // NB: the function arg is crucial here! nodes are known by id, not by index!
  circle = circle.data(nodes, function(d) { return d.id; });

  // update existing nodes (reflexive & selected visual states)
  circle.selectAll('circle')
    // .style('fill', function(d) { return (d === selected_node) ? d3.rgb(colors(d.id)).brighter().toString() : colors(d.id); })
    .style('fill', function(d) { 
      return ((d.flag == 1 && d == selected_node && d.greyflag == 0)? "#33CCFF" : (d.flag == 1 && d.greyflag == 2)? "#2EFEF7" : (d.flag == 2 && d.greyflag == 1) ? "grey" : d3.rgb(defaultNodeColor))

      // return (d == selected_node && d.flag == 1) ? "None": (d.flag == 2)? "grey": "None";
    })
    .classed('reflexive', function(d) { return d.reflexive; });

  // add new nodes
  var g1 = circle
           .on('mouseover', function(){
               this.style.cursor='pointer';
            }).enter().append('svg:g').attr('class','conceptG')
                .call(drag);

  g1.append('svg:circle')
    // .attr('class', 'node')
    .attr('r', 20)
    .style('fill', function(d) { 
      // return (d == selected_node && d.flag == 1) ? d3.rgb(defaultNodeColor).brighter(): (d.flag == 2)? "grey": d3.rgb(defaultNodeColor)
      // return (d == selected_node && d.flag == 1) ? d3.rgb(defaultNodeColor).brighter(): (d.flag == 2)? "grey": "None";
      return ((d == selected_node && d.flag == 1 && d.greyflag == 0) ? "#33CCFF": (d.flag == 1 && d.greyflag == 2)? "#2EFEF7" : (d.flag == 2 && d.greyflag == 1) ? "grey": d3.rgb(defaultNodeColor))
    })
    .style('stroke', 'black')
    .classed('reflexive', function(d) { return d.reflexive; })
    .on('mouseout', function(d) {
      if(!mousedown_node || d === mousedown_node) return;
      // unenlarge target node
      d3.select(this).attr('transform', '');
    })
    .on('mousedown', function(d) {
          nodeclick = true;
          allowNodeCreation = false;
          // select node
          mousedown_node = d;

          {
            if(mousedown_node === selected_node) {
                selected_node = null;
		if(mousedown_node.greyflag == 2 && mousedown_node.flag == 1){ d.greyflag = 1; d.flag = 2;}
		console.log("node not selected")
               }
	    else if (mousedown_node.flag == 1 && mousedown_node.greyflag == 2){
	          selected_node = null; d.greyflag = 1; d.flag = 2; console.log("suggestion deselected")
		  }
            else {
              selected_node = mousedown_node;
              console.log("node selected");
            }
          }

          // reposition drag line
          if (drawEdge) {

            console.log(drawEdge);
            drag_line
              .style('marker-end', 'url(#end-arrow)')
              .classed('hidden', false)
              .attr('d', 'M' + mousedown_node.x + ',' + mousedown_node.y + 'L' + mousedown_node.x + ',' + mousedown_node.y);
       };
    })
    .on('mouseup', function(d) {
      if (selected_node != null && mousedown_node == d && d.flag == 2 && d.greyflag == 1 && allowNodeDrag == false) {
        d.flag=1;
        suggestionPicked = true;
        d.greyflag = 2;    
        $("#button-g").hide();
      };
      if (selected_node == d) {
        // $('#myModal').modal('show');
        // $('#selectDiv').hide();
        // $("#modal-text").empty();
        // $("#modal-text").append("<h4>Node Values</h4>"+
        //                           "Domain: "+selected_node.domain+"<br>"+
        //                           "Type: "+selected_node.type+"<br>");
      };
      mouseup_node = d;
      // check for drag-to-self
      if (drawEdge) {
        if(mouseup_node === mousedown_node) { resetMouseVars(); return; }
        if(mouseup_node == null || mousedown_node == null) { resetMouseVars(); return; }

        // unenlarge target node
        d3.select(this).attr('transform', '');

        // add link to graph (update if exists)
        // NB: links are strictly source < target; arrows separately specified by booleans
        var source, target, direction;

        source = mousedown_node;
        target = mouseup_node;
        {
          ++lastEdgeID;
          link = {source: source, target: target, value: "", id: lastEdgeID, linkID : -1};
          selected_node = null;
          if (source != null && target != null && lastEdgeID!= null) {
            links.push(link);
            if (selected_link) {
              $("#linkId_"+selected_link.id).css('stroke', 'black');
            }
            selected_link = link;
            $("#type-div").hide();
            $("#entity-div").hide();
            $("#domain-div").hide();
            $("#edge-div").show();
            link_click=true;
          }
          else
            --lastEdgeID;
        }

        allowNodeCreation = true;
        nodeclick = false;

        for (var i = 0, j=0; i < links.length; i++) {
          if (links[i].linkID != -1 && (links[i].source != links[i].target)) {
            partialGraph[j] = {source: links[i].source.nodeID, edge: links[i].linkID, object: links[i].target.nodeID};
            j++;
          }
        };

        var data = {
          partialGraph: partialGraph,
          mode: 0,
          rejectedGraph: rejectedGraph,
          activeEdgeEnds: {source: selected_link.source.nodeID, object: selected_link.target.nodeID},
          dataGraphInUse: 0
        };

        // temp = postRequest(data, linkTypes, returnObject);
        // linkTypes= temp[0];
        // returnObject = temp[1];
        postRequest(data);
        newEdge = true;
        restart();
        $("#linkId_"+selected_link.id).css('stroke', 'orange');

        if (linkTypes.length != 0) {
          $("#myModal").modal('show');
          $("#type-div").hide();
          $("#entity-div").hide();
          $("#domain-div").hide();
          $("#edge-options").empty();
          $("#modal-title").empty();
          $("#modal-title").append("<h4>Select Edge Label</h4>");
          for (var i = 0; i < linkTypes.length; i++) {
            $("#edge-options").append('<option value="'+linkTypes[i][0]+'" id="add-value-1" >'+linkTypes[i][1]+'</option>');
          };
          $("#edge-div").show();
        }else{
          alert("The system was not able to find any suggestions for the edge.");
          selected_link.source = selected_link.target;
        }
      };
    });

  // show node IDs
  g1.append('svg:text')
      .attr("x", "0em")
      .attr("y", ".31em")
      .style("font-size", "15px")
      .style("text-anchor", "middle")
      .style("fill","#000000")
      .attr('class', 'id')
      .attr('id',function(d){return 'node'+d.id})
      .text(function(d) {
       return d.name; });


/* Adds options to Select Type and Select Entity when a node is selected*/
  if (selected_node != null) {
      $("#node"+selected_node.id).empty().append(selected_node.name);
  };

  if (selected_link != null) {
      $("#textPath"+selected_link.id).empty().append(selected_link.value);
  };

  // remove old nodes
  circle.exit().remove();

  // set the graph in motion
  force.start();
}

var entities = ["Select entity", "entity1", "entity2", "entity3", "entity4", "entity5", "entity6"];


$('#domain-options').change(function() {
    
    var text = $("#domain-options option:selected").text();
    var value = $("#domain-options option:selected").val();
    selected_node.name = text;
    selected_node.nodeID = value;
    selected_node.domain = value;
    console.log(value + "\n" + selected_node.name);
    addTypes(types);
    restart();
});


$('#type-options').change(function() {
    var text = $("#type-options option:selected").text();
    var value = $("#type-options option:selected").val();
    // if (selected_node.name == "select Name")
    selected_node.name = text;
    selected_node.nodeID = value;
    selected_node.type = value;
    // selected_node.domain = 

    console.log(value + "\n" + selected_node.name);

    $("#entity-options").prop('disabled', false);
    $("#entity-options").empty();
    for (var i = 0; i < entities.length; i++) {
      $("#entity-options").append('<option value="'+entities[i]+'" id="entity-value-1" onClick=changeName('+entities[i]+')>'+entities[i]+'</option>');
    };
    restart();
});

$('#entity-options').change(function() {
    var val = $("#entity-options option:selected").text();
    selected_node.name = val;
    console.log(val + "\n" + selected_node.name);
    restart();
 
});

$('#edge-options').change(function() {
    var val = $("#edge-options option:selected").text();
    var value = $("#edge-options option:selected").val();

    if (val != null)
      selected_link.value = val;

    if (value != null) {
      selected_link.linkID = value;
    };

    console.log(val + "\n" + selected_link.value);
    restart();
});

function erase(){
  nodes.length = 0;
  links.length = 0;
  lastNodeId = 0;
  lastEdgeID = 0;
  $('defs').empty();
  $('#pathG').empty();
  $('#circleG').empty();
  $('#linktextg').empty();
  // $("#queryConstructSVG").empty();
  // var refresh = svg.append("svg:foreignObject")
  //             .attr("width", 100)
  //             .attr("height", 100)
  //             .attr("y", "15")
  //             .attr("x", x)
  //             .append("xhtml:span")
  //             .attr("class", "control glyphicon glyphicon-zoom-in")
  //             .on('click',function(){
  //               alert("ASdasd");
  //             });

  restart();
}

function mousedown() {
  // prevent I-bar on drag
  //d3.event.preventDefault();
  
  // because :active only works in WebKit?
  svg.classed('active', true);
  if (nextButtonClick) {
    nextClick();
  }else{
    if(d3.event.ctrlKey || mousedown_node || mousedown_link) return;

    // insert new node at point
    if (!d3.event.shiftKey && allowNodeCreation) {

      jQuery("#selectDiv").show();
      var point = d3.mouse(this);
      disconnectedGraph = checkConnected(nodes, links);
      removeTempNodes();
      if (!disconnectedGraph && suggestionPicked ) {
        restart();
      };
      if (suggestionPicked == false && !disconnectedGraph) 
        createNewNode();
      if (suggestionPicked == true && !nodeclick) {
        suggestionsFinalized = true; 
        suggestionCounter = 0;
        restart();
        addSuggestions(0);
      };

    }
  }
  

  restart();
  // animatedHelp();
}

function mousemove() {
  if(!mousedown_node) return;

  // update drag line
  drag_line.attr('d', 'M' + mousedown_node.x + ',' + mousedown_node.y + 'L' + d3.mouse(this)[0] + ',' + d3.mouse(this)[1]);

  restart();
}

function createNewNode(){
  if (disconnectedGraph == false) {
    node = {id: ++lastNodeId, reflexive: false, name: " ", flag: 1, greyflag: 0, nodeID: -1, domain:"", type:"", entity:""};
    selected_node = node;
    newNode = true;
    nodes.push(node);
    selected_node = node;
    displayDomainOptions(domain);
    $("#modal-title").empty();
    $("#modal-title").append("<h4>Select Node Label</h4>");
    $("#domain-options").prop('disabled', false);
    $("#modal-text").empty();
    $('#myModal').modal('show');
  }
}

function mouseup() {

  allowNodeCreation = true;
  if(mousedown_node) {
    // hide drag line
    drag_line
      .classed('hidden', true)
      .style('marker-end', '');
  }

  // because :active only works in WebKit?
  svg.classed('active', false);

  // clear mouse event vars
  resetMouseVars();
  // removeTempNodes();
  // if (selected_node && nodeclick==false) {
  //   selected_node=null;
  // };

  if (selected_link && link_click==false) {
    $("#linkId_"+selected_link.id).css('stroke', 'black');
    selected_link = null;
  };
  link_click = false;
  nodeclick = false;
  animatedHelp();
  restart();
}

function removeTempNodes(){
  if (suggestions == true && nodeclick == false) {
    for (var i = 0; i < nodes.length; i++) {
      if (nodes[i].flag == 2) {

        spliceLinksForNode(nodes[i]);
        nodes.splice(nodes.indexOf(nodes[i]), 1);
        i--;
      };
    };
    suggestions = false;
    // createNewNode();
    // suggestionPicked = false;
    // addSuggestions(); 
  }
  selected_node = null;
}

function spliceLinksForNode(node) {
  var toSplice = links.filter(function(l) {
    return (l.source === node || l.target === node);
  });
  toSplice.map(function(l) {
    if (suggestionPicked || nextButtonClick)
      rejectedGraph.push({source: l.source.nodeID, edge: l.linkID, object: l.target.nodeID});
    l.source = l.target;
  });
}

// only respond once per keydown
var lastKeyDown = -1;

function keydown(){
  // console.log("keyCode: "+ d3.event.keyCode);
  //d3.event.preventDefault();


  if (d3.event.keyCode === 8){
     if( event.target == document.body) {
                  // stop this event from propagating further which prevents                      
                  // the browser from doing the 'back' action
           d3.event.preventDefault();}
   }

   else if (d3.event.keyCode == 13 || d3.event.keyCode == 16) {
    allowNodeDrag = true;
    translateAllowed = true;
    drawEdge = false;
    allowNodeCreation = false;
  }

   else if ( d3.event.keyCode == 46) {
      if(selected_node) {
        nodes.splice(nodes.indexOf(selected_node), 1);
        spliceLinksForNode(selected_node);
      } else if(selected_link) {
        $("#edge"+selected_link.id.toString()).remove();
        $("#linkId_"+selected_link.id.toString()).remove();
        $("#linkLabelHolderId_"+selected_link.id.toString()).remove();
        selected_link.source = selected_link.target;
        // links.splice(links.indexOf(selected_link), 1);
      }
      selected_link = null;
      selected_node = null;
      restart();
  }
  else
  { 
   // if(d3.event.target == 



  }
}

function keyup(){
  if (d3.event.keyCode == 13 || d3.event.keyCode == 16) {
    drawEdge = true;
    allowNodeDrag = false;
    translateAllowed = false;
    allowNodeCreation = true;
  }
}

zoom.on("zoom", function() {
      // d3.select("#"+gID).attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
      if (translateAllowed == true && nodeclick == false) 
        g.attr("transform", "translate(" + d3.event.translate + ")scale(" + d3.event.scale + ")");
    });
// svg.call(zoom);

function dragstart(d){
  if (translateAllowed && nodeclick) {
    force.stop();
    d.fixed = true;
    // d3.select(this).classed("fixed", d.fixed = true);
    // console.log("node drag");
  };
}

function dragmove(d){
  if (translateAllowed && nodeclick) {
    d.x += d3.event.dx;
    d.y +=  d3.event.dy;
    d.px += d3.event.dx;
    d.py += d3.event.dy;  
    tick();
    // restart();
  }
}

function dragend(d){
  if (translateAllowed && nodeclick) {
    // d.fixed = true;
    tick();
    force.resume();
  }
}

function temp(){
  console.log("mouse move");
}

function nextClick(){
  nextButtonClick = true;
  removeTempNodes();
  nextButtonClick = false;
  addSuggestions(0);
}

function addSuggestions(singleNode){

  $("#button-g").show();
  if(singleNode == 1) {
	// The passive edge suggestion call made after the very first node is added. The value of edge and object node is -1 and 0
	// respectively.
	partialGraph[0] = {source: nodes[0].nodeID, edge: -1, object: 0};
  }
  else {
    for (var i = 0, j=0; i < links.length; i++) {
      if (links[i].linkID != -1 && (links[i].source != links[i].target)) {
        partialGraph[j] = {source: links[i].source.nodeID, edge: links[i].linkID, object: links[i].target.nodeID};
        j++;
      }
    };
  }

  var data = {
    partialGraph: partialGraph,
    mode: 1,
    rejectedGraph: rejectedGraph,
    dataGraphInUse: 0
  };

  // if (suggestionCounter == 0) {
    postRequest(data);
  // };
  // var i,j;
  var i = 0;
  for (i = 0; (i < noOfSuggestions) && (i < returnObject.length) ; i++) {
    var entry = returnObject[i];

    if ((node = nodeExists(entry.source.split('|')[0])) != null) {
      var newNode = {id: ++lastNodeId, name: entry.object.split('|')[1], flag : 2, greyflag: 1,  nodeID: entry.object.split('|')[0]};
      var link = {source: node, target: newNode, value: entry.edge.split('|')[1], id: ++lastEdgeID, flag: 2 , linkID: entry.edge.split('|')[0]};
      nodes.push(newNode);
      links.push(link);
    }else if ((node = nodeExists(entry.object.split('|')[0])) != null) {
      var newNode = {id: ++lastNodeId, reflexive: false, name: entry.source.split('|')[1], flag : 2, greyflag: 1, nodeID: entry.source.split('|')[0]};
      nodes.push(newNode);
      var link = {source: node, target: newNode, value: entry.edge.split('|')[1], id: ++lastEdgeID, flag: 2,linkID: entry.edge.split('|')[0]};
      links.push(link);
      // links.push({source: node, target: newNode, value: entry.edge.split('1')[1], id: ++lastEdgeID, flag: 2,  linkID: entry.edge.split('1')[0]});
    };
  };
  suggestionCounter += i;
  suggestions = true;
  suggestionPicked = false;
  // suggestionCounter = i+j;
  restart();
}

function checkLinks(link){
  for (var i = 0; i < links.length; i++) {
    if ((links[i].source.name == link.source.name || links[i].source.name == link.target.name) && (links[i].target.name == link.target.name || links[i].target.name == link.source.name)) {
      return false;
    }
  }
  return true;
}

/*
Functions controls the active help. 
adds suggestions based on certain conditions. 
*/
function animatedHelp(){
  if (nodes.length == 1 && links.length == 0) {
    jQuery("#active-help").empty();
    jQuery("#active-help").append('<li class="li-animation">Click on the canvas to add a new node.</li>');
  }else if (checkConnected(nodes, links)) {
    jQuery("#active-help").empty();
    jQuery("#active-help").append('<li class="li-animation">Add an edge between the newly added node and another node in the graph by clicking on one node and dragging the mouse pointer to the other.</li>');
  }else if(suggestions && !suggestionPicked){
    jQuery("#active-help").empty();
    jQuery("#active-help").append('<li class="li-animation">Click on the grey nodes or edges you want to add to the query graph, OR</li>');
    jQuery("#active-help").append('<li class="li-animation">Click on the empty canvas to ignore the automatic suggestions and add a new node, OR</li>');
    jQuery("#active-help").append('<li class="li-animation">Click on New Suggestions button to get a new set of edge recommendations.</li>');
  }else if(suggestions && suggestionPicked){
    jQuery("#active-help").empty();
    jQuery("#active-help").append('<li class="li-animation">Click on other grey nodes or edges you want to add to the query graph, OR</li>');
    jQuery("#active-help").append('<li class="li-animation">Click on the empty canvas to save the selected nodes and delete the unselected grey nodes.</li>');
  }
  jQuery('#active-help').each(function() {
    // $(this).children().each(function(i) {
    //     $(this).delay((i++) * 1500).animate({left:0, opacity:1});
    // });
    $(this).children().animate({left:0, opacity:1});
  });
}

function postRequest(data){
  jQuery.ajax({
      type:"POST",
      beforeSend: function (request)
      {
          request.setRequestHeader("Content-type", "application/json");
          // request.setRequestHeader("Access-Control-Request-Method","POST");
          // request.setRequestHeader("Access-Control-Request-Headers","access-control-allow-origin, accept, content-type");
      },
      url: "http://idir-server1:8080/greeting",
      data: JSON.stringify(data),
      async: false,
      processData: false,
      // dataType: "json",
	error: function(xhr, status, error) {
	var err = eval("(" + xhr.responseText + ")");
        alert(err.Message);
        },      
	success: function(msg) {
        linkTypes = [];
        linkTypes[0] = "0| Select Edge".split("|");
        for (var i = 0; i < msg.rankedUniqueEdges.length; i++) {
          linkTypes[i+1] = msg.rankedUniqueEdges[i].edge.split("|");
        };

        returnObject = msg.rankedUniqueEdges;
        //for (var i = 0; i < msg.rankedEdges.length; i++) {
         // linkTypes[i] = msg.rankedEdges[i].edge.split("|");
        //};
        //returnObject = msg.rankedEdges;
        // returnObject = msg;
          // $("#results").append("The result =" + StringifyPretty(msg));
      }
    });
}


// app starts here
svg.on('mousedown', mousedown)
    .on('mousemove', function(){
      if(!mousedown_node) return;
        // update drag line

        drag_line.attr('d', 'M' + mousedown_node.x + ',' + mousedown_node.y + 'L' + d3.mouse(this)[0] + ',' + d3.mouse(this)[1]);
        restart();
    })
    .on('mouseup', mouseup);
d3.select(window)
  .on('keydown', keydown)
  .on('keyup', keyup);


restart();





